%form#daylog{:method=>"post",:action=>"/log"}
  %section#main
    .row
      .col.s12.m6.offset-m3
        %h5.text-center Good morning!
        %ul
          %li.margin-10
            %a.btn.waves-teal.full#continue Continue round
            %br/
            %br/
          %li.margin-10
            %a.btn.waves-teal.full#sea Start round at sea
            %br/
            %br/
          %li.margin-10
            %a.btn.waves-teal.full#port Start round in port
            %br/
            %br/
  -index = 0
  -$mapping.each do |room,systems|
    %section{:id=>room.slug}
      %h5.hide-on-med-and-down{:style=>"display:none;"}= room
      .row
        -systems.each do |system,measurements|
          .col.s12.m8.offset-m2
            .card.system{:class=>system.slug,:id=>"#{room.slug}_#{system.slug}"}
              .card-content
                .clearfix
                  .left.card-valid
                    %i.prefix.material-icons.grey-text.system-valid{:style=>"font-size:32px;display:none;"} check_circle
                    &nbsp;
                  .left
                    %span.card-title=system
                .switch.sys
                  %label
                    %input.check{:type=>"checkbox", :name=>"#{room.slug}_#{system.slug}_is-currently-working"}
                    -#%input.check{:type=>"checkbox"}
                    %span.lever
              .card-action.off
                -measurements.each do |measurement,specs|
                  -id = "#{room.slug}_#{system.slug}_#{measurement.slug}"
                  -dirt = [nil,nil,""]
                  -if specs.has_key? "data" 
                    -if specs["unit"] == "enum"
                      -dirt = [nil,nil,"dev"]
                    -elsif specs["unit"] == "binary"
                      -dirt = [nil,nil,"sw"]
                    -elsif specs["unit"] != "scale"
                      -dirt = ["display:none;",specs["data"],"devhide "+specs["data"].slug]
                      -measurement = measurement.sub(/^#{specs["data"]}\s+/,"")
                  -elsif specs["unit"] == "binary"
                    -dirt = [nil,nil,"sw"]
                  -if specs["port"] == 0
                    -d = dirt[2].split(/\s+/)
                    -d << "sea"
                    -dirt = [dirt[0],dirt[1],d.join(" ")]

                  .input-field{:style=>dirt[0],"data-name"=>dirt[1],:class=>dirt[2]}

                    -if specs["unit"] == "enum"
                      %i.material-icons.prefix.grey-text.maybe chevron_right
                      %i.material-icons.prefix.teal-text.yes check
                      %i.material-icons.prefix.red-text.text-darken-4.no close
                      %select{:validate=>true,:name=>id,:class=>(dirt[2] ? "ex" : "")}
                        %option{:value=>"nil",:disabled=>true,:selected=>true}= measurement
                        -if specs.has_key? "data"
                          -specs["data"].split("|").each do |option|
                            %option{:value=>option.slug}= option
                        -else
                          -[*specs["min"].to_i..specs["max"].to_i].each do |option|
                            %option{:value=>option}= measurement.sub("#",option.to_s)
                      %label=measurement

                    -elsif specs["unit"] == "binary"
                      %i.material-icons.prefix.grey-text.maybe check
                      %i.material-icons.prefix.teal-text.yes check
                      %input.checkhide{:type=>"hidden", :name=>id, :value=>(specs.has_key?("data") ? specs["data"].split("|")[1] : "off")} 
                      -#, "data-on"=>(specs.has_key?("data") ? specs["data"].split("|")[0] : "on"), "data-off"=>(specs.has_key?("data") ? specs["data"].split("|")[1] : "off")
                      -#%i.material-icons.prefix.red-text.text-darken-4.no close
                      .clearfix
                        .left
                          %label{:for=>id}= measurement
                        .switch.right
                          %label
                            %input.check{:type=>"checkbox", :name=>id, :value=>(specs.has_key?("data") ? specs["data"].split("|")[0] : "on")}
                            %span.lever

                    -elsif specs["unit"] == "trinary"
                      -#%i.material-icons.prefix.red-text.text-darken-4.no close
                      .clearfix
                        .left
                          %i.material-icons.prefix.grey-text.maybe chevron_right
                          %i.material-icons.prefix.teal-text.yes check
                          %label.fix= measurement
                        .radios.right
                          %label
                            %input{:type=>"radio",:name=>id,:id=>"#{id}_L",:value=>"L",:validate=>true}
                            %span L
                          %label
                            %input{:type=>"radio",:name=>id,:id=>"#{id}_M",:value=>"M",:validate=>true}
                            %span M
                          %label
                            %input{:type=>"radio",:name=>id,:id=>"#{id}_H",:value=>"H",:validate=>true}
                            %span H

                    -elsif specs["unit"] == "scale"
                      %i.material-icons.prefix.grey-text.range-valid.maybe check
                      %i.material-icons.prefix.teal-text.range-valid.yes check
                      %label{:for=>id}= measurement
                      .right.range-value.grey-text{"data-source"=>id}
                      %br/
                      %br/
                      .relative.range
                        %input.scale.valid{:type=>"range", :name=>id, :id=>id, :step=>(specs.has_key?("data") ? specs["data"] : 1), :min=>(specs.has_key?("min") ? specs["min"] : 0), :max=>(specs.has_key?("max") ? specs["max"] : 10), :value=>0}

                    -else
                      %i.material-icons.prefix.grey-text.maybe chevron_right
                      %i.material-icons.prefix.teal-text.yes check
                      %i.material-icons.prefix.red-text.text-darken-4.no close
                      %input{ :id => id,
                        :type => "number",
                        :name => id,
                        :step => ["cube","bar","cm","Â°C"].include?(specs["unit"]) ? 0.01 : 0.1,
                        :min  => specs.has_key?("min") ? specs["min"] : nil,
                        :max  => specs.has_key?("max") ? specs["max"] : nil,
                        :validate => true } 
                      .unit=specs["unit"]
                      %label{:for=>id}= measurement

        -if $lubrication.has_key?(room)
          .col.s12.m8.offset-m2
            .card.lubrication{:id=>"#{room.slug}_lubrication"}
              .card-content
                .clearfix
                  .left.card-valid
                    %i.card-valid.prefix.material-icons.black-text.large{:style=>"font-size:32px;"} opacity
                    &nbsp;
                  .left
                    %span.card-title Lubrication
                  .right
                    %a.lube-add
                      %i.card-valid.prefix.material-icons.teal-text{:style=>"font-size:32px;"} add_circle
              .card-action.off
                %table
                  %thead
                    %tr
                      %th Unit
                      %th Oil Type
                      %th Amount
                      %th &nbsp;
                  %tbody
                    
        .col.s12.m8.offset-m2
          .card.notes
            .card-content
              .input-field
                %textarea.materialize-textarea{:name=>"notes[#{room.slug}]"}
                %label{:for=>"notes[#{room.slug}]"}= "#{room} Notes"
      .row
        .col.s12.foot-arrows
          %br/
          -if index > 0
            .left
              %a.btn-large.btn-floating.waves-effect.waves-light{:href=>"##{$mapping.keys[index-1].slug}"}
                %i.material-icons chevron_left
          -if index < $mapping.keys.length - 1
            .right
              %a.btn-large.btn-floating.waves-effect.waves-light{:href=>"##{$mapping.keys[index+1].slug}"}
                %i.material-icons chevron_right
          -else
            .right
              %a.btn-large.btn-floating.waves-effect.waves-light{:href=>"#submit"}
                %i.material-icons send
          %br/
          %br/
          %br/

    -index += 1

  %section#submit
    %h5.hide-on-med-and-down{:style=>"display:none;"} Submit results
    .row
      .col.s12
        .card
          .card-content
            .row
              .col.s12
                .clearfix
                  %span.left.card-title Submit results
                  -#.right.card-valid
                    %i.material-icons.teal-text{:style=>"font-size:32px;display:none;"} check_circle
              .col.s12.m6
                .input-field
                  %input#date.datepicker.ex{:validate=>true,:required=>true,:name=>"date",:type=>"text",:value=>Date.today.strftime("%Y-%m-%d")}
                  %label{:for=>"date"} Date
              .col.s12.m6
                .input-field
                  %input.ex{:validate=>true,:required=>true,:name=>"user",:type=>"text"}
                  %label{:for=>"date"} Duty engineer
              .col.s12
                .input-field.port
                  %input{:name=>"status",:type=>"hidden"}
                  %input.ex{:validate=>true,:required=>true,:name=>"port",:type=>"text"}
                  %label{:for=>"port"} Port
              .col.s12.m6
                .input-field.sea
                  %input.ex{:validate=>true,:required=>true,:name=>"from_port",:type=>"text"}
                  %label{:for=>"from_port"} From
              .col.s12.m6
                .input-field.sea
                  %input.ex{:validate=>true,:required=>true,:name=>"to_port",:type=>"text"}
                  %label{:for=>"to_port"} To
              .col.s12
                .input-field
                  %textarea.materialize-textarea{:name=>"notes[submit]"}
                  %label{:for=>"notes"} Notes

              .col.s2.m1.foot-arrows
                .input-field
                  %a.btn.full.large.waves-effect.waves-light{:href=>"##{$mapping.keys[-1].slug}"}
                    %i.material-icons chevron_left
                    .large BACK
              .col.s8.m6.offset-m2
                .input-field
                  %button.btn.full.submit.large.waves-effect.waves-light
                    %i.material-icons.right.large send
                    .large SEND FORM
              .col.s2.m3
                .input-field
                  %button#anyway.btn.full.large.waves-effect.waves-light.red.darken-4{:style=>"display:none",:href=>"#"}
                    %i.material-icons.right.large error_outline
                    .large SEND ANYWAY

              .col.s12.errors
                .card.red.darken-4
                  .card-content
                    .clearfix
                      %span.left.title.white-text Following errors encountered:
                    %ul.content

              .col.s12.empties
                .card.teal
                  .card-content
                    .clearfix
                      %span.left.title.white-text Following fields were left blank:
                    %ul.content

-content_for :body_end do
  :javascript
    $("#date").datepicker( {
      format: 'yyyy-mm-dd'
    });
    if (localStorage.length <= 2) {
      $("#continue").attr("disabled",true);
      $("#sea").attr("disabled",false);
      $("#port").attr("disabled",false);
    } else {
      $("#continue").attr("disabled",false);
      $("#sea").attr("disabled",true);
      $("#port").attr("disabled",true);
    }
    $("#sea").on("click",function(){
      atSea();
      yesterday();
    })
    $("#port").on("click",function(){
      inPort();
      yesterday();
    })
